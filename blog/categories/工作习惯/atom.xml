<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 工作习惯 | iCen DiaMondinG]]></title>
  <link href="http://joycn.github.com/blog/categories/工作习惯/atom.xml" rel="self"/>
  <link href="http://joycn.github.com/"/>
  <updated>2013-12-07T21:11:26+08:00</updated>
  <id>http://joycn.github.com/</id>
  <author>
    <name><![CDATA[joycn]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[编码风格]]></title>
    <link href="http://joycn.github.com/blog/2013/07/18/coding-style/"/>
    <updated>2013-07-18T09:55:00+08:00</updated>
    <id>http://joycn.github.com/blog/2013/07/18/coding-style</id>
    <content type="html"><![CDATA[<p>今天看了下openvswitch的编码风格,感觉整体还不错,这里记录下,以后自己的编码风格也会按着这个来.</p>

<!--more -->


<pre><code>                  ## Open vSwitch Coding Style ##
</code></pre>

<h3>BASICS</h3>

<ul>
<li><p>Limit lines to 79 characters.</p></li>
<li><p>Use form feeds (control+L) to divide long source files into logical
pieces.  A form feed should appear as the only character on a line.</p></li>
<li><p>Do not use tabs for indentation.</p></li>
<li><p>Avoid trailing spaces on lines.</p></li>
</ul>


<h3>NAMING</h3>

<ul>
<li><p>Use names that explain the purpose of a function or object.</p></li>
<li><p>Use underscores to separate words in an identifier: multi_word_name.</p></li>
<li><p>Use lowercase for most names.  Use uppercase for macros, macro
parameters, and members of enumerations.</p></li>
<li><p>Give arrays names that are plural.</p></li>
<li><p>Pick a unique name prefix (ending with an underscore) for each
module, and apply that prefix to all of that module's externally
visible names.  Names of macro parameters, struct and union members,
and parameters in function prototypes are not considered externally
visible for this purpose.</p></li>
<li><p>Do not use names that begin with _.  If you need a name for
"internal use only", use __ as a suffix instead of a prefix.</p></li>
<li><p>Avoid negative names: "found" is a better name than "not_found".</p></li>
<li><p>In names, a "size" is a count of bytes, a "length" is a count of
characters.  A buffer has size, but a string has length.  The length
of a string does not include the null terminator, but the size of the
buffer that contains the string does.</p></li>
</ul>


<h3>COMMENTS</h3>

<ul>
<li><p>Comments should be written as full sentences that start with a
capital letter and end with a period.  Put two spaces between
sentences.</p></li>
<li><p>Write block comments as shown below.  You may put the /<em> and </em>/ on
the same line as comment text if you prefer.</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>/*
</span><span class='line'> * We redirect stderr to /dev/null because we often want to remove all
</span><span class='line'> * traffic control configuration on a port so its in a known state.  If
</span><span class='line'> * this done when there is no such configuration, tc complains, so we just
</span><span class='line'> * always ignore it.
</span><span class='line'> */
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>Each function and each variable declared outside a function, and
each struct, union, and typedef declaration should be preceded by a
comment.  See FUNCTION DEFINITIONS below for function comment
guidelines.</p></li>
<li><p>Each struct and union member should each have an inline comment that
explains its meaning.  structs and unions with many members should be
additionally divided into logical groups of members by block comments,
e.g.:
<div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/&lt;em> An event that will wake the following call to poll_block(). &lt;/em>/
</span><span class='line'>  struct poll_waiter {&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>  /* Set when the waiter is created. */
</span><span class='line'>  struct list node;           /* Element in global waiters list. */
</span><span class='line'>  int fd;                     /* File descriptor. */
</span><span class='line'>  short int events;           /* Events to wait for (POLLIN, POLLOUT). */
</span><span class='line'>  poll_fd_func *function;     /* Callback function, if any, or null. */
</span><span class='line'>  void *aux;                  /* Argument to callback function. */
</span><span class='line'>  struct backtrace *backtrace; /* Event that created waiter, or null. */
</span><span class='line'>
</span><span class='line'>  /* Set only when poll_block() is called. */
</span><span class='line'>  struct pollfd *pollfd;      /* Pointer to element of the pollfds array
</span><span class='line'>                                 (null if added from a callback). */
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>  };</span></code></pre></td></tr></table></div></figure></notextile></div></p></li>
<li><p>Use XXX or FIXME comments to mark code that needs work.</p></li>
<li><p>Don't use // comments.</p></li>
<li><p>Don't comment out or #if 0 out code.  Just remove it.  The code that
was there will still be in version control history.</p></li>
</ul>


<h3>FUNCTIONS</h3>

<ul>
<li><p>Put the return type, function name, and the braces that surround the
function's code on separate lines, all starting in column 0.</p></li>
<li><p>Before each function definition, write a comment that describes the
function's purpose, including each parameter, the return value, and
side effects.  References to argument names should be given in
single-quotes, e.g. 'arg'.  The comment should not include the
function name, nor need it follow any formal structure.  The comment
does not need to describe how a function does its work, unless this
information is needed to use the function correctly (this is often
better done with comments <em>inside</em> the function).</p></li>
<li><p>Simple static functions do not need a comment.</p></li>
<li><p>Within a file, non-static functions should come first, in the order
that they are declared in the header file, followed by static
functions.  Static functions should be in one or more separate pages
(separated by form feed characters) in logical groups.  A commonly
useful way to divide groups is by "level", with high-level functions
first, followed by groups of progressively lower-level functions.
This makes it easy for the program's reader to see the top-down
structure by reading from top to bottom.</p></li>
<li><p>All function declarations and definitions should include a
prototype.  Empty parentheses, e.g. "int foo();", do not include a
prototype (they state that the function's parameters are unknown);
write "void" in parentheses instead, e.g. "int foo(void);".</p></li>
<li><p><strong>Prototypes for static functions should either all go at the top of
the file, separated into groups by blank lines, or they should appear
at the top of each page of functions.  Don't comment individual
prototypes, but a comment on each group of prototypes is often
appropriate.</strong></p></li>
<li><p>In the absence of good reasons for another order, the following
parameter order is preferred.  One notable exception is that data
parameters and their corresponding size parameters should be paired.</p>

<ul>
<li>The primary object being manipulated, if any (equivalent to the
 "this" pointer in C++).</li>
<li>Input-only parameters.</li>
<li>Input/output parameters.</li>
<li>Output-only parameters.</li>
<li>Status parameter.</li>
</ul>


<p>Example:</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>/* Stores the features supported by 'netdev' into each of '*current',
</span><span class='line'> * '*advertised', '*supported', and '*peer' that are non-null.  Each value
</span><span class='line'> * is a bitmap of "enum ofp_port_features" bits, in host byte order.
</span><span class='line'> * Returns 0 if successful, otherwise a positive errno value.  On failure,
</span><span class='line'> * all of the passed-in values are set to 0. */
</span><span class='line'>int
</span><span class='line'>netdev_get_features(struct netdev *netdev,
</span><span class='line'>                    uint32_t *current, uint32_t *advertised,
</span><span class='line'>                    uint32_t *supported, uint32_t *peer)
</span><span class='line'>{
</span><span class='line'>    ...
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>Functions that destroy an instance of a dynamically-allocated type
should accept and ignore a null pointer argument.  Code that calls
such a function (including the C standard library function free())
should omit a null-pointer check.  We find that this usually makes
code easier to read.</p>

<h3>FUNCTION PROTOTYPES</h3>

<ul>
<li>Put the return type and function name on the same line in a function
prototype:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>static const struct option_class *get_option_class(int code);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Omit parameter names from function prototypes when the names do not
give useful information, e.g.:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>int netdev_get_mtu(const struct netdev *, int *mtup);
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>STATEMENTS</h3>

<ul>
<li>Indent each level of code with 4 spaces.  Use BSD-style brace
placement:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if (a()) {
</span><span class='line'>    b();
</span><span class='line'>    d();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>Put a space between "if", "while", "for", etc. and the expressions
that follow them.</p></li>
<li><p>Enclose single statements in braces:</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if (a &gt; b) {
</span><span class='line'>    return a;
</span><span class='line'>} else {
</span><span class='line'>    return b;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>Use comments and blank lines to divide long functions into logical
groups of statements.</p></li>
<li><p>Avoid assignments inside "if" and "while" conditions.</p></li>
<li><p>Do not put gratuitous parentheses around the expression in a return
statement, that is, write "return 0;" and not "return(0);"</p></li>
<li><p>Write only one statement per line.</p></li>
<li><p>Indent "switch" statements like this:</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>switch (conn-&gt;state) {
</span><span class='line'>case S_RECV:
</span><span class='line'>    error = run_connection_input(conn);
</span><span class='line'>    break;
</span><span class='line'>
</span><span class='line'>case S_PROCESS:
</span><span class='line'>    error = 0;
</span><span class='line'>    break;
</span><span class='line'>
</span><span class='line'>case S_SEND:
</span><span class='line'>    error = run_connection_output(conn);
</span><span class='line'>    break;
</span><span class='line'>
</span><span class='line'>default:
</span><span class='line'>    NOT_REACHED();
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>"switch" statements with very short, uniform cases may use an
abbreviated style:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>switch (code) {
</span><span class='line'>case 200: return "OK";
</span><span class='line'>case 201: return "Created";
</span><span class='line'>case 202: return "Accepted";
</span><span class='line'>case 204: return "No Content";
</span><span class='line'>default: return "Unknown";
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>Use "for (;;)" to write an infinite loop.</p></li>
<li><p>In an if/else construct where one branch is the "normal" or "common"
case and the other branch is the "uncommon" or "error" case, put the
common case after the "if", not the "else".  This is a form of
documentation.  It also places the most important code in sequential
order without forcing the reader to visually skip past less important
details.  (Some compilers also assume that the "if" branch is the more
common case, so this can be a real form of optimization as well.)</p></li>
</ul>


<h3>MACROS</h3>

<ul>
<li><p>Don't define an object-like macro if an enum can be used instead.</p></li>
<li><p>Don't define a function-like macro if a "static inline" function
can be used instead.</p></li>
<li><p>If a macro's definition contains multiple statements, enclose them
with "do { ... } while (0)" to allow them to work properly in all
syntactic circumstances.</p></li>
<li><p><strong>Do use macros to eliminate the need to update different parts of a
single file in parallel, e.g. a list of enums and an array that gives
the name of each enum.</strong>  For example:</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>/* Logging importance levels. */
</span><span class='line'>#define VLOG_LEVELS                             \
</span><span class='line'>    VLOG_LEVEL(EMER, LOG_ALERT)                 \
</span><span class='line'>    VLOG_LEVEL(ERR, LOG_ERR)                    \
</span><span class='line'>    VLOG_LEVEL(WARN, LOG_WARNING)               \
</span><span class='line'>    VLOG_LEVEL(INFO, LOG_NOTICE)                \
</span><span class='line'>    VLOG_LEVEL(DBG, LOG_DEBUG)
</span><span class='line'>enum vlog_level {
</span><span class='line'>#define VLOG_LEVEL(NAME, SYSLOG_LEVEL) VLL_##NAME,
</span><span class='line'>    VLOG_LEVELS
</span><span class='line'>#undef VLOG_LEVEL
</span><span class='line'>    VLL_N_LEVELS
</span><span class='line'>};
</span><span class='line'>
</span><span class='line'>/* Name for each logging level. */
</span><span class='line'>static const char *level_names[VLL_N_LEVELS] = {
</span><span class='line'>#define VLOG_LEVEL(NAME, SYSLOG_LEVEL) #NAME,
</span><span class='line'>    VLOG_LEVELS
</span><span class='line'>#undef VLOG_LEVEL
</span><span class='line'>};
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>SOURCE FILES</h3>

<ul>
<li>Each source file should state its license in a comment at the very
top, followed by a comment explaining the purpose of the code that is
in that file. The comment should explain how the code in the file
relates to code in other files. The goal is to allow a programmer to
quickly figure out where a given module fits into the larger system.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>The first non-comment line in a .c source file should be:&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>#include &lt;config.h&gt;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;h1>include directives should appear in the following order:&lt;/h1>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>1. #include &lt;config.h&gt;
</span><span class='line'>
</span><span class='line'>2. The module's own headers, if any.  Including this before any
</span><span class='line'>   other header (besides &lt;config.h&gt;) ensures that the module's
</span><span class='line'>   header file is self-contained (see HEADER FILES) below.
</span><span class='line'>
</span><span class='line'>3. Standard C library headers and other system headers, preferably
</span><span class='line'>   in alphabetical order.  (Occasionally one encounters a set of
</span><span class='line'>   system headers that must be included in a particular order, in
</span><span class='line'>   which case that order must take precedence.)
</span><span class='line'>
</span><span class='line'>4. Open vSwitch headers, in alphabetical order.  Use "", not &lt;&gt;,
</span><span class='line'>   to specify Open vSwitch header names.
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>HEADER FILES</h3>

<ul>
<li>Each header file should start with its license, as described under
SOURCE FILES above, followed by a "header guard" to make the header
file idempotent, like so:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>#ifndef NETDEV_H
</span><span class='line'>#define NETDEV_H 1
</span><span class='line'>
</span><span class='line'>...
</span><span class='line'>
</span><span class='line'>#endif /* netdev.h */
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>Header files should be self-contained; that is, they should #include
whatever additional headers are required, without requiring the client
to #include them for it.</p></li>
<li><p>Don't define the members of a struct or union in a header file,
unless client code is actually intended to access them directly or if
the definition is otherwise actually needed (e.g. inline functions
defined in the header need them).</p></li>
<li><p>Similarly, don't #include a header file just for the declaration of
a struct or union tag (e.g. just for "struct <name>;").  Just declare
the tag yourself.  This reduces the number of header file
dependencies.</p></li>
</ul>


<h3>TYPES</h3>

<ul>
<li><p>Use typedefs <strong>sparingly</strong>.  Code is clearer if the actual type is
visible at the point of declaration.  Do not, in general, declare a
typedef for a struct, union, or enum.  Do not declare a typedef for a
pointer type, because this can be very confusing to the reader.</p></li>
<li><p>A function type is a good use for a typedef because it can clarify
code.  The type should be a function type, not a pointer-to-function
type.  That way, the typedef name can be used to declare function
prototypes.  (It cannot be used for function definitions, because that
is explicitly prohibited by C89 and C99.)</p></li>
<li><p>You may assume that "char" is exactly 8 bits and that "int" and
"long" are at least 32 bits.</p></li>
<li><p>Don't assume that "long" is big enough to hold a pointer.  If you
need to cast a pointer to an integer, use "intptr_t" or "uintptr_t"
from &lt;stdint.h>.</p></li>
<li><p>Use the int<N><em>t and uint<N></em>t types from &lt;stdint.h> for exact-width
integer types.  Use the PRId<N>, PRIu<N>, and PRIx<N> macros from
&lt;inttypes.h> for formatting them with printf() and related functions.</p></li>
<li><p>Use %zu to format size_t with printf().</p></li>
<li><p>Use bit-fields sparingly.  Do not use bit-fields for layout of
network protocol fields or in other circumstances where the exact
format is important.</p></li>
<li><p>Declare bit-fields to be type "unsigned int" or "signed int".  Do
<em>not</em> declare bit-fields of type "int": C89 allows these to be either
signed or unsigned according to the compiler's whim.  (A 1-bit
bit-field of type "int" may have a range of -1...0!)  Do not declare
bit-fields of type _Bool or enum or any other type, because these are
not portable.</p></li>
<li><p>Try to order structure members such that they pack well on a system
with 2-byte "short", 4-byte "int", and 4- or 8-byte "long" and pointer
types.  Prefer clear organization over size optimization unless you
are convinced there is a size or speed benefit.</p></li>
<li><p>Pointer declarators bind to the variable name, not the type name.
Write "int <em>x", not "int</em> x" and definitely not "int * x".</p></li>
</ul>


<h3>EXPRESSIONS</h3>

<ul>
<li>Put one space on each side of infix binary and ternary operators:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>* / %
</span><span class='line'>+ -
</span><span class='line'>&lt;&lt; &gt;&gt;
</span><span class='line'>&lt; &lt;= &gt; &gt;=
</span><span class='line'>== !=
</span><span class='line'>&amp;
</span><span class='line'>^
</span><span class='line'>|
</span><span class='line'>&amp;&amp;
</span><span class='line'>||
</span><span class='line'>?:
</span><span class='line'>= += -= *= /= %= &amp;= ^= |= &lt;&lt;= &gt;&gt;=
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>Avoid comma operators.</p></li>
<li><p>Do not put any white space around postfix, prefix, or grouping
operators:</p></li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>() [] -&gt; .
</span><span class='line'>! ~ ++ -- + - * &amp;
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p>Exception 1: Put a space after (but not before) the "sizeof" keyword.
</span><span class='line'>Exception 2: Put a space between the () used in a cast and the
</span><span class='line'>expression whose type is cast: (void *) 0.</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Break long lines before the ternary operators ? and :, rather than
after them, e.g.</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>return (out_port != VIGP_CONTROL_PATH
</span><span class='line'>        ? alpheus_output_port(dp, skb, out_port)
</span><span class='line'>        : alpheus_output_control(dp, skb, fwd_save_skb(skb),
</span><span class='line'>                                 VIGR_ACTION));
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Do not parenthesize the operands of &amp;&amp; and || unless operator
precedence makes it necessary, or unless the operands are themselves
expressions that use &amp;&amp; and ||.  Thus:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if (!isdigit((unsigned char)s[0])
</span><span class='line'>    || !isdigit((unsigned char)s[1])
</span><span class='line'>    || !isdigit((unsigned char)s[2])) {
</span><span class='line'>    printf("string %s does not start with 3-digit code\n", s);
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>but</p>

<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>if (rule &amp;&amp; (!best || rule-&gt;priority &gt; best-&gt;priority)) {
</span><span class='line'>    best = rule;
</span><span class='line'>}
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li>Do parenthesize a subexpression that must be split across more than
one line, e.g.:</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;/p>
</span><span class='line'>
</span><span class='line'>&lt;pre>&lt;code>*idxp = ((l1_idx &lt;&lt; PORT_ARRAY_L1_SHIFT)
</span><span class='line'>         | (l2_idx &lt;&lt; PORT_ARRAY_L2_SHIFT)
</span><span class='line'>         | (l3_idx &lt;&lt; PORT_ARRAY_L3_SHIFT));
</span><span class='line'>&lt;/code>&lt;/pre>
</span><span class='line'>
</span><span class='line'>&lt;p></span></code></pre></td></tr></table></div></figure></notextile></div></p>

<ul>
<li><p>Try to avoid casts.  Don't cast the return value of malloc().</p></li>
<li><p>The "sizeof" operator is unique among C operators in that it accepts
two very different kinds of operands: an expression or a type.  In
general, prefer to specify an expression, e.g. "int <em>x =
xmalloc(sizeof </em>x);".  When the operand of sizeof is an expression,
there is no need to parenthesize that operand, and please don't.</p></li>
<li><p>Use the ARRAY_SIZE macro from lib/util.h to calculate the number of
elements in an array.</p></li>
<li><p>When using a relational operator like "&lt;" or "==", put an expression
or variable argument on the left and a constant argument on the
right, e.g. "x == 0", <em>not</em> "0 == x".</p></li>
</ul>


<h3>BLANK LINES</h3>

<ul>
<li>Put one blank line between top-level definitions of functions and
global variables.</li>
</ul>


<h3>C DIALECT</h3>

<ul>
<li><p>Some C99 features are OK because they are widely implemented even in
older compilers:</p>

<ul>
<li><p>Flexible array members (e.g. struct { int foo[]; }).</p></li>
<li><p>"static inline" functions (but no other forms of "inline", for
which GCC and C99 have differing interpretations).</p></li>
<li><p>"long long"</p></li>
<li><p>&lt;stdint.h> and &lt;inttypes.h>.</p></li>
<li><p>bool and &lt;stdbool.h>, but don't assume that bool or _Bool can
only take on the values 0 or 1, because this behavior can't be
simulated on C89 compilers.</p></li>
</ul>
</li>
<li><p>Don't use other C99 features that are not widely implemented in
older compilers:</p>

<ul>
<li><p>Don't use designated initializers (e.g. don't write "struct foo
foo = {.a = 1};" or "int a[] = {[2] = 5};").</p></li>
<li><p>Don't mix declarations and code within a block.</p></li>
<li><p>Don't use declarations in iteration statements (e.g. don't write
"for (int i = 0; i &lt; 10; i++)").</p></li>
<li><p>Don't put a trailing comma in an enum declaration (e.g. don't
write "enum { x = 1, };").</p></li>
</ul>
</li>
<li><p>As a matter of style, avoid // comments.</p></li>
<li><p>Avoid using GCC extensions unless you also add a fallback for
non-GCC compilers.  You can, however, use GCC extensions and C99
features in code that compiles only on GNU/Linux (such as
lib/netdev-linux.c), because GCC is the system compiler there.</p></li>
</ul>

]]></content>
  </entry>
  
</feed>
